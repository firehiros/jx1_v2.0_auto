/**
 * @file MemoryConfig.h
 * @brief Centralized memory configuration loader
 *
 * Loads memory offsets and patterns from memory_config.json
 * Auto-generated by AutoScanMemory tool
 */

#pragma once

#include <string>
#include <map>
#include <cstdint>
#include <memory>

// Use nlohmann/json for JSON parsing
// If not available, will need to add to third_party
#include <nlohmann/json.hpp>

namespace JX1 {

/**
 * Structure to hold offset information
 */
struct OffsetInfo {
    std::string offset;      // Hex string like "0x10"
    std::string type;        // "int32", "float", "string", etc.
    int size;                // Size in bytes
    std::string description;
    bool verified;           // Has this offset been verified?

    // Parsed offset value
    uintptr_t GetOffsetValue() const {
        return std::stoull(offset, nullptr, 16);
    }
};

/**
 * Structure to hold base address information
 */
struct BaseAddressInfo {
    std::string type;        // "static" or "dynamic"
    std::string address;     // Hex string
    std::string description;
    bool verified;
    std::string found_at;
    std::string method;

    // Parsed address value
    uintptr_t GetAddressValue() const {
        if (address.empty() || address == "0x0") return 0;
        return std::stoull(address, nullptr, 16);
    }
};

/**
 * Structure to hold pattern information
 */
struct PatternInfo {
    std::string pattern;
    std::string mask;
    int offset_to_address;
    std::string description;
    std::string assembly;
    bool verified;
};

/**
 * Main configuration class
 * Singleton pattern for easy access throughout the application
 */
class MemoryConfig {
public:
    // Singleton access
    static MemoryConfig& Get();

    // Delete copy constructor and assignment operator
    MemoryConfig(const MemoryConfig&) = delete;
    MemoryConfig& operator=(const MemoryConfig&) = delete;

    /**
     * Load configuration from JSON file
     * @param filePath Path to memory_config.json
     * @return true if loaded successfully
     */
    bool LoadFromFile(const std::string& filePath = "../config/memory_config.json");

    /**
     * Reload configuration (useful for hot-reloading during development)
     */
    bool Reload();

    /**
     * Check if configuration is loaded and valid
     */
    bool IsLoaded() const { return m_IsLoaded; }

    /**
     * Get configuration version
     */
    std::string GetVersion() const { return m_Version; }

    /**
     * Get game process name
     */
    std::string GetProcessName() const { return m_ProcessName; }

    // ========================================
    // Base Address Getters
    // ========================================

    /**
     * Get player base address
     */
    uintptr_t GetPlayerBase() const;

    /**
     * Get entity manager base address
     */
    uintptr_t GetEntityManagerBase() const;

    /**
     * Get inventory base address
     */
    uintptr_t GetInventoryBase() const;

    // ========================================
    // Player Offset Getters
    // ========================================

    // Health offsets
    uintptr_t GetPlayerHP_Offset() const;
    uintptr_t GetPlayerMaxHP_Offset() const;
    uintptr_t GetPlayerMP_Offset() const;
    uintptr_t GetPlayerMaxMP_Offset() const;

    // Position offsets
    uintptr_t GetPlayerPosX_Offset() const;
    uintptr_t GetPlayerPosY_Offset() const;
    uintptr_t GetPlayerPosZ_Offset() const;
    uintptr_t GetPlayerDirection_Offset() const;

    // Character offsets
    uintptr_t GetPlayerLevel_Offset() const;
    uintptr_t GetPlayerExperience_Offset() const;
    uintptr_t GetPlayerGold_Offset() const;
    uintptr_t GetPlayerName_Offset() const;
    uintptr_t GetPlayerID_Offset() const;

    // State offsets
    uintptr_t GetPlayerIsDead_Offset() const;
    uintptr_t GetPlayerInCombat_Offset() const;
    uintptr_t GetPlayerIsMoving_Offset() const;

    // ========================================
    // Entity Offset Getters
    // ========================================

    uintptr_t GetEntityID_Offset() const;
    uintptr_t GetEntityType_Offset() const;
    uintptr_t GetEntityHP_Offset() const;
    uintptr_t GetEntityMaxHP_Offset() const;
    uintptr_t GetEntityPosX_Offset() const;
    uintptr_t GetEntityPosY_Offset() const;
    uintptr_t GetEntityPosZ_Offset() const;
    uintptr_t GetEntityName_Offset() const;

    // ========================================
    // Pattern Getters
    // ========================================

    PatternInfo GetPlayerBasePattern() const;
    PatternInfo GetEntityManagerPattern() const;
    PatternInfo GetAttackFunctionPattern() const;
    PatternInfo GetMoveToFunctionPattern() const;
    PatternInfo GetUseSkillFunctionPattern() const;

    // ========================================
    // Generic Getters (for extensibility)
    // ========================================

    /**
     * Get any offset by path (e.g., "player_offsets.health.hp")
     */
    OffsetInfo GetOffset(const std::string& path) const;

    /**
     * Get any base address by name
     */
    BaseAddressInfo GetBaseAddress(const std::string& name) const;

    /**
     * Get any pattern by name
     */
    PatternInfo GetPattern(const std::string& name) const;

    // ========================================
    // Utility Functions
    // ========================================

    /**
     * Print loaded configuration (for debugging)
     */
    void PrintConfig() const;

    /**
     * Check if a specific offset is verified
     */
    bool IsOffsetVerified(const std::string& path) const;

    /**
     * Get last load error message
     */
    std::string GetLastError() const { return m_LastError; }

private:
    // Private constructor for singleton
    MemoryConfig();
    ~MemoryConfig() = default;

    // Load functions
    bool ParseJSON(const nlohmann::json& j);
    void LoadBaseAddresses(const nlohmann::json& j);
    void LoadPlayerOffsets(const nlohmann::json& j);
    void LoadEntityOffsets(const nlohmann::json& j);
    void LoadPatterns(const nlohmann::json& j);

    // Helper to parse offset from JSON
    OffsetInfo ParseOffsetInfo(const nlohmann::json& j) const;
    BaseAddressInfo ParseBaseAddressInfo(const nlohmann::json& j) const;
    PatternInfo ParsePatternInfo(const nlohmann::json& j) const;

    // Helper to convert hex string to uintptr_t
    uintptr_t HexToUintptr(const std::string& hexStr) const;

private:
    // State
    bool m_IsLoaded;
    std::string m_ConfigFilePath;
    std::string m_LastError;

    // Metadata
    std::string m_Version;
    std::string m_GeneratedBy;
    std::string m_GeneratedAt;
    std::string m_GameVersion;

    // Game info
    std::string m_ProcessName;
    std::string m_ModuleName;
    std::string m_Architecture;
    bool m_Is64Bit;

    // Base addresses
    std::map<std::string, BaseAddressInfo> m_BaseAddresses;

    // Offsets (organized by category)
    std::map<std::string, OffsetInfo> m_PlayerOffsets;
    std::map<std::string, OffsetInfo> m_EntityOffsets;
    std::map<std::string, OffsetInfo> m_InventoryOffsets;
    std::map<std::string, OffsetInfo> m_ItemOffsets;

    // Patterns
    std::map<std::string, PatternInfo> m_Patterns;

    // Full JSON for generic access
    nlohmann::json m_FullConfig;
};

// ========================================
// Convenience Macros
// ========================================

#define MEM_CONFIG JX1::MemoryConfig::Get()

// Quick offset access
#define PLAYER_BASE MEM_CONFIG.GetPlayerBase()
#define PLAYER_HP_OFFSET MEM_CONFIG.GetPlayerHP_Offset()
#define PLAYER_MP_OFFSET MEM_CONFIG.GetPlayerMP_Offset()
#define PLAYER_LEVEL_OFFSET MEM_CONFIG.GetPlayerLevel_Offset()

} // namespace JX1
